@page "/reference-tokens"
@using Microsoft.AspNetCore.Components.Forms
@using IdentityServerConfig.Models
@using IdentityServerConfig.Services
@attribute [Authorize(Policy = "ReferenceTokenView")]
@inject PersistedGrantDbContext persistedGrantDbContext
@inject ConfigurationDbContext configurationDbContext
@inject IReferenceTokenValidator referenceTokenValidator

<ul class="nav nav-tabs mb-3" id="referenceTokenTabs" role="tablist">
    <Tab TabId="general" Title="General" IsActive="true"/>
    <Tab TabId="check" Title="Check"/>
</ul>
<div class="tab-content" id="referenceTokenTabsContent">
    <TabPane TabId="general" TabIndex="0" IsActive="true">
        <div class="row">
            <div class="col-6">
                <QuickGrid Items='persistedGrantDbContext.PersistedGrants.Where(c => c.Type.Equals("reference_token"))' class="table table-hover table-striped">
                    <PropertyColumn Property="c => c.ClientId" Title="Client Id" Sortable="true"></PropertyColumn>
                    <PropertyColumn Property="c => c.CreationTime" Title="Creation Time (UTC)" Sortable="true"></PropertyColumn>
                    <PropertyColumn Property="c => c.Expiration" Title="Expiration (UTC)" Sortable="true"></PropertyColumn>
                    <TemplateColumn Title="Status" Context="token">
                        @{
                            if (referenceTokenValidator.IsActive(token.Expiration))
                            {
                                <span class="badge bg-success">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Expired</span>
                            }
                        }
                    </TemplateColumn>
                    <TemplateColumn Context="token">
                        @{
                            if (referenceTokenValidator.IsActive(token.Expiration))
                            {
                                <button class="btn btn-sm btn-danger" role="button">Revoke</button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-danger" role="button" disabled>Revoke</button>
                            }
                        }
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>
    </TabPane>
    <TabPane TabId="check" TabIndex="1">
        <div class="row">
            <div class="col-6">
                <EditForm Model="_checkTokenModel" OnSubmit="@HandleSubmit" autocomplete="off">
                    <div class="from-group mb-3">
                        <label for="clientId">Client</label>
                        <select id="clientId" class="form-select" @bind="_checkTokenModel.ClientId" required>
                            <option value="" disabled selected>Select Client</option>
                            @foreach (var client in configurationDbContext.Clients)
                            {
                                var clientName = client.ClientName ?? "No Name";
                                <option value="@client.ClientId">@client.ClientId - @clientName</option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label for="referenceToken">Reference Token</label>
                        <input type="text" id="referenceToken" class="form-control" autocomplete="false" @bind="_checkTokenModel.ReferenceToken" required/>
                    </div>
                    <button type="submit" class="btn btn-sm btn-primary" role="button">Check</button>
                </EditForm>
            </div>
            <div class="col-3">
                <ReferenceTokenStatus ReferenceTokenData="@_referenceTokenData"></ReferenceTokenStatus>
            </div>
        </div>
    </TabPane>
</div>

@code {
    readonly CheckReferenceTokenModel _checkTokenModel = new();
    ReferenceTokenDataModel _referenceTokenData = new();
    
    private void HandleSubmit(EditContext editContext)
    {
        _referenceTokenData = referenceTokenValidator.Validate(_checkTokenModel);
    }
}