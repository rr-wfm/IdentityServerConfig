@page "/reference-tokens"
@using Microsoft.AspNetCore.Components.Forms
@using IdentityServerConfig.Models
@using IdentityServerConfig.Services
@attribute [Authorize(Policy = "ReferenceTokenView")]
@inject PersistedGrantDbContext persistedGrantDbContext
@inject ConfigurationDbContext configurationDbContext
@inject IReferenceTokenValidator referenceTokenValidator
@inject IReferenceTokenRevoker referenceTokenRevoker

<PageTitle>Reference Tokens - IdentityServerConfig</PageTitle>
<ul class="nav nav-tabs mb-3" id="referenceTokenTabs" role="tablist">
    <Tab TabId="general" Title="General" IsActive="true"/>
    <Tab TabId="check" Title="Check"/>
</ul>
<div class="tab-content" id="referenceTokenTabsContent">
    <TabPane TabId="general" TabIndex="0" IsActive="true">
        <div class="row">
            <div>
                <QuickGrid Items="@persistedGrants" @ref="grid" class="table table-hover table-striped" Pagination="@_pagination">
                    <TemplateColumn Title="Client Id"  Context="token" SortBy="@_sortClientId" Class="w-25">
                        <a href="clients/@token.ClientTableId" class="btn btn-link btn-sm" role="button">@token.ClientId</a>
                    </TemplateColumn>
                    <PropertyColumn Property="c => c.ClientName" Title="Client Name" Sortable="true" Class="w-25"/>
                    <PropertyColumn Property="c => c.CreationTime" Title="Creation Time (UTC)" Sortable="true" Class="w-15"/>
                    <PropertyColumn Property="c => c.Expiration" Title="Expiration (UTC)" Sortable="true" Class="w-15"/>
                    <TemplateColumn Title="Status" Context="token" SortBy="_sortStatus" Class="w-10">
                        @{
                            if (IsActive(token.Expiration))
                            {
                                <span class="badge bg-success">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Expired</span>
                            }
                        }
                    </TemplateColumn>
                    <TemplateColumn Context="token" Class="w-10">
                        <AuthorizeView Policy="ReferenceTokenRevoke">
                            <Authorized>
                                @{
                                    if (IsActive(token.Expiration))
                                    {
                                        <button class="btn btn-sm btn-danger" role="button" @onclick="@(() => OpenRevokeDialog(token.PersistedGrantTableId, token.ClientId))">Revoke</button>
                                    }
                                }
                            </Authorized>
                            <NotAuthorized>
                                @{
                                    if (IsActive(token.Expiration))
                                    {
                                        <button class="btn btn-sm btn-danger" role="button" disabled>Revoke</button>
                                    }
                                }
                            </NotAuthorized>
                        </AuthorizeView>
                    </TemplateColumn>
                </QuickGrid>
                <PageSelector Pagination="_pagination"/>
            </div>
        </div>
    </TabPane>
    <TabPane TabId="check" TabIndex="1">
        <div class="row">
            <div class="col-6">
                <EditForm Model="_checkTokenModel" OnSubmit="@CheckReferenceToken" autocomplete="off">
                    <div class="from-group mb-3">
                        <label for="clientId">Client</label>
                        <select id="clientId" class="form-select" @bind="_checkTokenModel.ClientId" required>
                            <option value="" disabled selected>Select Client</option>
                            @foreach (var client in configurationDbContext.Clients)
                            {
                                var clientName = client.ClientName ?? "NULL";
                                <option value="@client.ClientId">@client.ClientId - @clientName</option>
                            }
                        </select>
                    </div>
                    <div class="form-group mb-3">
                        <label for="referenceToken">Reference Token</label>
                        <input type="text" id="referenceToken" class="form-control" autocomplete="false" @bind="_checkTokenModel.ReferenceToken" required/>
                    </div>
                    <button type="submit" class="btn btn-sm btn-primary" role="button">Check</button>
                </EditForm>
            </div>
            <div class="col-3">
                <ReferenceTokenStatus Model="@_referenceTokenData"/>
            </div>
        </div>
    </TabPane>
</div>

<ModalDialog
    Title="Are you sure?"
    Message=@string.Concat("Are you sure you want to revoke the reference token for ", _clientIdToRevoke, "?")
    OnClose="@OnRevokeDialogClose"
    DialogType="ModalDialogType.RevokeDelete"
    Show="RevokeDialogOpen"/>


@code {
    readonly CheckReferenceTokenModel _checkTokenModel = new();
    ReferenceTokenDataModel _referenceTokenData = new();

    private bool RevokeDialogOpen { get; set; }
    private long _referenceTokenIdToRevoke;
    private string _clientIdToRevoke = string.Empty;
    private readonly PaginationState _pagination = new() {ItemsPerPage = 10};
    private QuickGrid<ReferenceTokenTableData> grid;
    private IQueryable<ReferenceTokenTableData> persistedGrants;

    readonly GridSort<ReferenceTokenTableData> _sortClientId = GridSort<ReferenceTokenTableData>.ByAscending(c => c.ClientId);
    readonly GridSort<ReferenceTokenTableData> _sortStatus = GridSort<ReferenceTokenTableData>.ByAscending(c => c.Expiration);

    public static bool IsActive(DateTime? expirationDate)
    {
        return expirationDate == null || expirationDate >= DateTime.UtcNow;
    }

    private void CheckReferenceToken(EditContext editContext)
    {
        _referenceTokenData = referenceTokenValidator.Validate(_checkTokenModel);
    }

    private async Task OnRevokeDialogClose(bool accepted)
    {
        if (accepted)
        {
            await referenceTokenRevoker.Revoke(_referenceTokenIdToRevoke, _clientIdToRevoke);
            await grid.RefreshDataAsync();
        }
        RevokeDialogOpen = false;
    }

    private void OpenRevokeDialog(long referenceTokenId, string clientId)
    {
        _clientIdToRevoke = clientId;
        _referenceTokenIdToRevoke = referenceTokenId;
        RevokeDialogOpen = true;
    }

    protected override void OnInitialized()
    {
        var persistedGrantsTable = persistedGrantDbContext.PersistedGrants.Where(c => c.Type.Equals("reference_token")).ToList();
        var clientsTable = configurationDbContext.Clients.ToList();

        persistedGrants = (from pg in persistedGrantsTable
            join c in clientsTable on pg.ClientId equals c.ClientId
            select new ReferenceTokenTableData
            {
                PersistedGrantTableId = pg.Id,
                ClientTableId = c.Id,
                ClientId = pg.ClientId,
                Expiration = pg.Expiration,
                CreationTime = pg.CreationTime,
                ClientName = c.ClientName ?? "NULL",
            }).AsQueryable();
    }

}