@page "/scopes/{ApiScopeId:int}"
@attribute [Authorize(Policy = "ScopeView")]
@inject ConfigurationDbContext DbContext;

<PageTitle>Scope Details -IdentityServerConfig</PageTitle>
@if (SelectedApiScope == null)
{
    <p class="placeholder-glow">
        <span class="placeholder col-12"></span>
    </p>
}
else
{
    <EntityProvider Value="@SelectedApiScope">
        <ul class="nav nav-tabs mb-3" id="apiScopeTabs" role="tablist">
            <button class="nav-link" onclick="history.back()" style="text-decoration: none">&lt Back</button>
            <Tab TabId="general" Title="General" IsActive="true"/>
            <Tab TabId="properties" Title="Properties"/>
            <Tab TabId="claims" Title="Claims"/>
        </ul>
        <div class="tab-content" id="apiScopeTabsContent">
            <TabPane TabId="general" TabIndex="0" IsActive="true">
                <div class="row">
                    <div class="col-6">
                        <TextField Property="a => a.Name" DisplayName="Name"/>
                        <TextField Property="a => a.DisplayName" DisplayName="Display Name"/>
                        <TextAreaField Property="c => c.Description" DisplayName="Description"/>
                    </div>
                    <div class="col-4">
                        <SwitchField Property="a => a.Enabled" DisplayName="Enabled"/>
                        <SwitchField Property="a => a.ShowInDiscoveryDocument" DisplayName="Show in Discovery document"/>
                        <SwitchField Property="a => a.Emphasize" DisplayName="Emphasize"/>
                        <SwitchField Property="a => a.NonEditable" DisplayName="Non-editable"/>
                    </div>
                </div>
            </TabPane>
            <TabPane TabId="properties" TabIndex="1">
                <QuickGrid Items="@SelectedApiScope.Properties.AsQueryable()" Class="table table-hover table-striped" Pagination="_paginationProperties">
                    <PropertyColumn Property="s => s.Key"/>
                    <PropertyColumn Property="s => s.Value"/>
                </QuickGrid>
                <PageSelector Pagination="_paginationProperties"/>
            </TabPane>
            <TabPane TabId="claims" TabIndex="2">
                <QuickGrid Items="@SelectedApiScope.UserClaims.AsQueryable()" Class="table table-hover table-striped" Pagination="_paginationClaims">
                    <PropertyColumn Property="s => s.Type"/>
                </QuickGrid>
                <PageSelector Pagination="_paginationClaims"/>
            </TabPane>
        </div>
    </EntityProvider>
}

@code {

    [Parameter]
    public int ApiScopeId { get; set; }

    private ApiScope? SelectedApiScope { get; set; }
    private readonly PaginationState _paginationProperties = new() { ItemsPerPage = 10 };
    private readonly PaginationState _paginationClaims = new() { ItemsPerPage = 10 };

    protected override async Task OnParametersSetAsync()
    {
        SelectedApiScope = await DbContext.ApiScopes.Include(a => a.Properties)
            .Include(a => a.UserClaims)
            .FirstOrDefaultAsync(a => a.Id == ApiScopeId);
    }

}