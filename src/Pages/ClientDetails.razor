@page "/clients/{ClientId:int}"
@attribute [Authorize(Policy = "ClientView")]
@inject ConfigurationDbContext DbContext;

<PageTitle>Client Details - IdentityServerConfig</PageTitle>
@if (SelectedClient == null)
{
    <p class="placeholder-glow">
        <span class="placeholder col-12"></span>
    </p>
}
else
{
    <EntityProvider Value="@SelectedClient">
        <ul class="nav nav-tabs mb-3" id="clientTabs" role="tablist">
            <Tab TabId="general" Title="General" IsActive="true" />
            <Tab TabId="secrets" Title="Secrets" />
            <Tab TabId="properties" Title="Properties" />
            <Tab TabId="scopes" Title="Scopes" />
            <Tab TabId="claims" Title="Claims" />
        </ul>
        <div class="tab-content" id="clientTabsContent">
            <TabPane TabId="general" TabIndex="0" IsActive="true">
                <div class="row">
                    <div class="col-6">
                        <TextField Property="c => c.ClientId" DisplayName="Client Id" />
                        <TextField Property="c => c.ClientName" DisplayName="Client Name" />
                        <TextField Property="c => c.ProtocolType" DisplayName="Protocol Type" />
                        <TextAreaField Property="c => c.Description" DisplayName="Description" />
                        <TextField Property="c => c.ClientUri" DisplayName="Client Uri" />
                        <TextField Property="c => c.LogoUri" DisplayName="Logo Uri" />
                        <div class="mb-3">
                            <label class="form-label">Redirect Uri's</label>
                            @foreach (var redirectUri in SelectedClient.RedirectUris ?? Enumerable.Empty<ClientRedirectUri>())
                            {
                                <input type="text" readonly class="form-control-plaintext" value="@redirectUri.RedirectUri">
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Post Logout Redirect Uri's</label>
                            @foreach (var redirectUri in SelectedClient.PostLogoutRedirectUris ?? Enumerable.Empty<ClientPostLogoutRedirectUri>())
                            {
                                <input type="text" readonly class="form-control-plaintext" value="@redirectUri.PostLogoutRedirectUri">
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Allowed Grant Types</label>
                            @foreach (var grantType in SelectedClient.AllowedGrantTypes ?? Enumerable.Empty<ClientGrantType>())
                            {
                                <input type="text" readonly class="form-control-plaintext" value="@grantType.GrantType">
                            }
                        </div>
                    </div>
                    <div class="col-4">
                        <SwitchField Property="c => c.Enabled" DisplayName="Enabled" />
                        <SwitchField Property="c => c.RequireClientSecret" DisplayName="Require Client Secret" />
                        <SwitchField Property="c => c.RequireConsent" DisplayName="Require Consent" />
                        <SwitchField Property="c => c.AllowRememberConsent" DisplayName="Allow Remember Consent" />
                        <SwitchField Property="c => c.AlwaysIncludeUserClaimsInIdToken" DisplayName="Always Include User Claims in Id Token" />
                        <SwitchField Property="c => c.FrontChannelLogoutSessionRequired" DisplayName="Front Channel Logout Session Required" />
                        <SwitchField Property="c => c.BackChannelLogoutSessionRequired" DisplayName="Back Channel Logout Session Required" />
                        <SwitchField Property="c => c.RequirePkce" DisplayName="Require PKCE" />
                        <SwitchField Property="c => c.AllowPlainTextPkce" DisplayName="Allow plain text PKCE" />
                        <SwitchField Property="c => c.RequireRequestObject" DisplayName="Require Request Object" />
                        <SwitchField Property="c => c.AllowAccessTokensViaBrowser" DisplayName="Allow access tokens via browser" />
                        <SwitchField Property="c => c.NonEditable" DisplayName="Non-editable" />
                    </div>
                </div>
            </TabPane>
            <TabPane TabId="secrets" TabIndex="1">
                <QuickGrid Items="@SelectedClient.ClientSecrets.AsQueryable()" Class="table table-hover table-striped" Pagination="_paginationSecrets">
                    <PropertyColumn Property="@(s => s.Description)" />
                    <TemplateColumn Title="Type">
                        <ChildContent Context="secret">
                            <span class="badge bg-primary">@secret.Type</span>
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn Property="@(s => s.Created)" Title="Created (UTC)"/>
                    <PropertyColumn Property="@(s => s.Expiration)" />
                </QuickGrid>
                <PageSelector Pagination="_paginationSecrets"></PageSelector>
            </TabPane>
            <TabPane TabId="properties" TabIndex="2">
                <QuickGrid Items="@SelectedClient.Properties.AsQueryable()" Class="table table-hover table-striped" Pagination="_paginationProperties">
                    <PropertyColumn Property="s => s.Key" />
                    <PropertyColumn Property="s => s.Value" />
                </QuickGrid>
                <PageSelector Pagination="_paginationProperties"></PageSelector>
            </TabPane>
            <TabPane TabId="scopes" TabIndex="3">
                <QuickGrid Items="@SelectedClient.AllowedScopes.AsQueryable()" Class="table table-hover table-striped" Pagination="_paginationScopes">
                    <PropertyColumn Property="s => s.Scope" />
                </QuickGrid>
                <PageSelector Pagination="_paginationScopes"></PageSelector>
            </TabPane>
            <TabPane TabId="claims" TabIndex="4">
                <QuickGrid Items="@SelectedClient.Claims.AsQueryable()" Class="table table-hover table-striped" Pagination="_paginationClaims">
                    <TemplateColumn Title="Prefix">
                        <ChildContent Context="secret">
                            @SelectedClient.ClientClaimsPrefix
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn Property="c => c.Type" />
                    <PropertyColumn Property="c => c.Value" />
                </QuickGrid>
                <PageSelector Pagination="_paginationClaims"></PageSelector>
            </TabPane>
        </div>
    </EntityProvider>
}

@code {
    [Parameter]
    public int ClientId { get; set; }
    
    private Client? SelectedClient { get; set; }
    private readonly PaginationState _paginationSecrets = new() {ItemsPerPage = 10};
    private readonly PaginationState _paginationScopes = new() {ItemsPerPage = 10};
    private readonly PaginationState _paginationProperties = new() {ItemsPerPage = 10};
    private readonly PaginationState _paginationClaims = new() {ItemsPerPage = 10};

    protected override async Task OnParametersSetAsync()
    {
        SelectedClient = await DbContext.Clients.Include(c => c.RedirectUris)
                                                .Include(c => c.PostLogoutRedirectUris)
                                                .Include(c => c.AllowedGrantTypes)
                                                .Include(c => c.ClientSecrets)
                                                .Include(c => c.AllowedScopes)
                                                .Include(c => c.Properties)
                                                .Include(c => c.Claims)
                                                .FirstOrDefaultAsync(c => c.Id == ClientId);
    }
}
